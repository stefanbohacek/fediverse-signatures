{"version":3,"file":"fetchRequest.min.js","sources":["modules/fetchRequest.js"],"sourcesContent":["import sleep from \"/js/modules/sleep.min.js\";\n\nexport default async (url, platform, options) => {\n  // console.log('debug:fetchRequest', url, platform, options);\n\n  try {\n    const response = await fetch(url, options);\n    // console.log({\n    //   url,\n    //   response: {\n    //     status: response.status,\n    //     body: response.body,\n    //   }\n    // });\n    let data = await response.json();\n    let nextPage;\n\n    switch (platform) {\n      case \"mastodon\":\n      case \"hometown\":\n      case \"friendica\":\n      case \"pleroma\":\n      case \"akkoma\":\n        if (/<([^>]+)>; rel=\"next\"/g.test(response.headers.get(\"link\"))) {\n          nextPage = /<([^>]+)>; rel=\"next\"/g.exec(\n            response.headers.get(\"link\")\n          )[1];\n        }\n\n        if (nextPage) {\n          await sleep(500);\n          data = data.concat(await fetchRequest(nextPage, platform, options));\n        }\n\n        break;\n      case \"misskey\":\n      case \"calckey\":\n      case \"firefish\":\n      case \"foundkey\":\n      case \"magnetar\":\n        if (data.length === window.globalConfig.misskeyFetchLimit) {\n          if (data && data.length) {\n            const lastAccount = data.slice(-1)[0];\n            let body = JSON.parse(options.body);\n            body.untilId = lastAccount.id;\n            options.body = JSON.stringify(body);\n          }\n          await sleep(500);\n          data = data.concat(await fetchRequest(url, platform, options));\n        }\n        break;\n      default:\n        break;\n    }\n\n    return data;\n  } catch (error) {\n    console.log(\"fetchRequest error\", { error });\n    return [];\n  }\n};\n"],"names":["sleep","async","url","platform","options","lastAccount","body","response","await","fetch","let","data","json","nextPage","test","headers","get","exec","concat","fetchRequest","length","window","globalConfig","misskeyFetchLimit","slice","JSON","parse","untilId","id","stringify","error","console","log"],"mappings":"OAAOA,UAAW,0CAEHC,MAAOC,EAAKC,EAAUC,KAGnC,IACE,IAoCcC,EACFC,EArCNC,EAAWC,MAAMC,MAAMP,EAAKE,CAAO,EAQzCM,IAAIC,EAAOH,MAAMD,EAASK,KAAK,EAC3BC,EAEJ,OAAQV,GACN,IAAK,WACL,IAAK,WACL,IAAK,YACL,IAAK,UACL,IAAK,UAEDU,EADE,yBAAyBC,KAAKP,EAASQ,QAAQC,IAAI,MAAM,CAAC,EACjD,yBAAyBC,KAClCV,EAASQ,QAAQC,IAAI,MAAM,CAC7B,EAAE,GAGAH,KACFL,MAAMR,MAAM,GAAG,EACfW,EAAOA,EAAKO,OAAOV,MAAMW,aAAaN,EAAUV,EAAUC,CAAO,CAAC,GAGpE,MACF,IAAK,UACL,IAAK,UACL,IAAK,WACL,IAAK,WACL,IAAK,WACCO,EAAKS,SAAWC,OAAOC,aAAaC,oBAClCZ,GAAQA,EAAKS,SACTf,EAAcM,EAAKa,MAAM,CAAC,CAAC,EAAE,IAC/BlB,EAAOmB,KAAKC,MAAMtB,EAAQE,IAAI,GAC7BqB,QAAUtB,EAAYuB,GAC3BxB,EAAQE,KAAOmB,KAAKI,UAAUvB,CAAI,GAEpCE,MAAMR,MAAM,GAAG,EACfW,EAAOA,EAAKO,OAAOV,MAAMW,aAAajB,EAAKC,EAAUC,CAAO,CAAC,EAKnE,CAEA,OAAOO,CAIT,CAHE,MAAOmB,GAEP,OADAC,QAAQC,IAAI,qBAAsB,CAAEF,MAAAA,CAAM,CAAC,EACpC,EACT,CACF"}